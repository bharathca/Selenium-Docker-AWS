<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>LearnSeleniumDockerAWS</groupId>
  <artifactId>LearnSeleniumDockerAWS</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  
  <properties>
        <selenium.java.version>4.20.0</selenium.java.version>
        <logback.version>1.5.6</logback.version>
        <testng.version>7.10.2</testng.version>
        <jackson.version>2.17.1</jackson.version>
        
        <!-- plugins versions -->
        <maven.compiler.version>3.13.0</maven.compiler.version>
        <maven.dependency.version>3.6.1</maven.dependency.version>
        <maven.jar.version>3.4.1</maven.jar.version>
        <maven.surefire.version>3.2.5</maven.surefire.version>
        <maven.resources.plugin>3.3.1</maven.resources.plugin>
        
        <!-- output directory -->
        <package.directory>${project.build.directory}/docker-resources</package.directory>
    </properties>
    
    
    <dependencies>
        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
            <artifactId>selenium-java</artifactId>
            <version>${selenium.java.version}</version>
        </dependency>
        
        
        <!-- logging library -->
        <!-- https://www.baeldung.com/logback -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>${logback.version}</version>
        </dependency>
                
        

        
        <!-- To deserialize json into Java object or vice versa -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>${jackson.version}</version>
            <scope>test</scope>
        </dependency>
        
        
        <!-- Test framework -->
        <dependency>
            <groupId>org.testng</groupId>
            <artifactId>testng</artifactId>
            <version>${testng.version}</version>
            <scope>test</scope>
        </dependency>
        
        
    </dependencies>
    
    
    <build>
        <finalName>selenium-docker</finalName>
        
        <plugins>
			
            <!-- To compile the source code using specific java version. also to force IDE to change the settings -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven.compiler.version}</version>
                <configuration>
                    <release>17</release>
                </configuration>
            </plugin>
            
            <!-- mvn clean test _Dbrowser=chrome -Dselenium.grid.enabled=true -->
            <!-- To run the tests using specific parameters, change thread count, testng report output directory etc -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${maven.surefire.version}</version>
                <configuration>
                    <systemPropertyVariables>
                        <browser>chrome</browser>
                        <selenium.grid.enabled>false</selenium.grid.enabled>
                    </systemPropertyVariables>
                    <suiteXmlFiles>
                        <file>src/test/resources/testSuites/vendorPortal.xml</file>
                        <file>src/test/resources/testSuites/flight-reservation.xml</file>
                    </suiteXmlFiles>
                    <threadCount>5</threadCount>
                    <reportsDirectory>target/test-output</reportsDirectory>
                </configuration>
            </plugin>
            
            
            <!-- 1. To copy all the dependencies to run our tests as part of "mvn package" -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>${maven.dependency.version}</version>
                <executions>
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>
                                ${package.directory}/libs
                            </outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            
            <!-- 2. To package our page objects, test classes into jar -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>${maven.jar.version}</version>
                <configuration>
                    <outputDirectory>${package.directory}/libs</outputDirectory>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>test-jar</goal>
                        </goals>
                        <!-- To package only the .class files Reason: We do not want the resource folder where our test data is present -->
                        <configuration>
							<includes>**/*.class</includes>
						</configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- 3. To copy resources created above in 2 into the output directory -->
            <!-- Can be used for updating the test data from resource folder-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>${maven.resources.plugin}</version>
                <executions>
                    <execution>
                        <id>copy-resources</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${package.directory}</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>src/test/resources</directory>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        
        </plugins>
   	
   	</build>
   	
</project>